<?xml version="1.0"?>
<launch>
  <!--
    Main entry point for loading a single UR5 into Gazebo, in isolation, in the
    empty world.

    A set of ros_control controllers similar to those loaded by ur_robot_driver
    will be loaded by 'ur_control.launch.xml' (note: *similar*, *not* identical).

    This bringup .launch file is intentionally given the same name as the one in
    the ur_robot_driver package, as it fulfills a similar role: loading the
    configuration and starting the necessary ROS nodes which in the end provide
    a ROS API to a Universal Robots UR5. Only in this case, instead of a real
    robot, a virtual model in Gazebo is used.

    NOTE 1: as this is not a real robot, there are limits to the faithfulness
    of the simulation. Dynamic behaviour will be different from a real robot.
    Only a subset of topics, actions and services is supported. Specifically,
    interaction with the Control Box itself is not supported, as Gazebo does not
    simulate a Control Box. This means: no Dashboard server, no URScript topic
    and no force-torque sensor among other things.

    NOTE 2: users wishing to integrate a UR5 with other models into a more
    complex simulation should NOT modify this file. Instead, if it would be
    desirable to reuse this file with a custom simulation, they should create a
    copy and update this copy so as to accomodate required changes.

    In those cases, treat this file as an example, showing one way how a Gazebo
    simulation for UR robots *could* be launched. It is not necessary to mimic
    this setup completely.
  -->

  <!--Robot description and related parameter files -->
  <arg name="joint_limit_params" default="$(find universal_robot)/config/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find universal_robot)/config/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find universal_robot)/config/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find universal_robot)/config/visual_parameters.yaml"/>

  <!--Common parameters -->
  <arg name="transmission_hw_interface" default="hardware_interface/PositionJointInterface" doc="The hardware_interface to expose for each joint in the simulated robot (one of: [PositionJointInterface, VelocityJointInterface, EffortJointInterface])"/>
  <arg name="safety_limits" default="false" doc="If True, enable the safety limits controller"/>
  <arg name="safety_pos_margin" default="0.15" doc="The lower/upper limits in the safety controller" />
  <arg name="safety_k_position" default="20" doc="Used to set k position in the safety controller" />

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find universal_robot)/config/ur5_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="joint_state_controller pos_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="joint_group_pos_controller" doc="Controllers that are initally loaded, but not started."/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" default="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" default="125" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" default="robot" doc="The name to give to the model in Gazebo (after spawning it)." />
  <arg name="gazebo_world" default="$(find empty_world)/worlds/empty.world" doc="The '.world' file to load in Gazebo." />
  <arg name="gui" default="true" doc="If true, Gazebo UI is started. If false, only start Gazebo server." />
  <arg name="paused" default="false" doc="If true, start Gazebo in paused mode. If false, start simulation as soon as Gazebo has loaded." />
  <arg name="robot_description_param_name" default="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  <arg name="spawn_z" default="0.1" doc="At which height the model should be spawned. NOTE: lower values will cause the robot to collide with the ground plane." />
  <arg name="start_gazebo" default="true" doc="If true, Gazebo will be started. If false, Gazebo will be assumed to have been started elsewhere." />

  <!-- Load urdf on the parameter server -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find universal_robot)/urdf/ur.xacro'
    joint_limit_params:=$(arg joint_limit_params)
    kinematics_params:=$(arg kinematics_params)
    physical_params:=$(arg physical_params)
    visual_params:=$(arg visual_params)
    transmission_hw_interface:=$(arg transmission_hw_interface)
    safety_limits:=$(arg safety_limits)
    safety_pos_margin:=$(arg safety_pos_margin)
    safety_k_position:=$(arg safety_k_position)"
    />

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>

  <!-- Start the 'driver' (ie: Gazebo in this case) -->

  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- Start Gazebo and load the empty world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch" if="$(arg start_gazebo)">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Spawn the model loaded earlier in the simulation just started -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param $(arg robot_description_param_name)
      -model $(arg gazebo_model_name)
      -z $(arg spawn_z)"
    output="screen" respawn="false" />

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

</launch>
